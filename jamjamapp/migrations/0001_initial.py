# Generated by Django 3.2.6 on 2021-08-12 16:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=20)),
                ('phone_number', models.CharField(max_length=20)),
                ('birthyear', models.CharField(max_length=20)),
                ('birthday', models.CharField(max_length=20)),
                ('gender', models.CharField(max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Big_Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=200)),
                ('Writer', models.CharField(max_length=100)),
                ('Write_day', models.DateTimeField(verbose_name='date published')),
                ('Content', models.TextField()),
                ('Image', models.ImageField(blank=True, upload_to='images/')),
                ('view_count', models.IntegerField(default=0)),
                ('Blog_likes', models.ManyToManyField(related_name='Blog_likes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_site_name', models.CharField(max_length=50)),
                ('book_url', models.URLField()),
            ],
            options={
                'ordering': ['book_site_name'],
            },
        ),
        migrations.CreateModel(
            name='Bucket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bucket_title', models.CharField(max_length=100)),
                ('bucket_date', models.CharField(default='oooo년 oo월 oo일', max_length=15)),
                ('bucket_body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diary_title', models.CharField(max_length=100)),
                ('diary_date', models.CharField(default='oooo년 oo월 oo일', max_length=15)),
                ('diary_body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Small_Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Play_C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=200)),
                ('Writer', models.CharField(max_length=100)),
                ('Write_day', models.DateTimeField(verbose_name='date published')),
                ('Content', models.TextField()),
                ('Image', models.ImageField(blank=True, upload_to='images/')),
                ('view_count', models.IntegerField(default=0)),
                ('big_region', models.ManyToManyField(blank=True, to='jamjamapp.Big_Region')),
                ('play_likes', models.ManyToManyField(related_name='Play_likes', to=settings.AUTH_USER_MODEL)),
                ('small_region', models.ManyToManyField(blank=True, to='jamjamapp.Small_Region')),
            ],
        ),
        migrations.CreateModel(
            name='Look_C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=200)),
                ('Writer', models.CharField(max_length=100)),
                ('Write_day', models.DateTimeField(verbose_name='date published')),
                ('Content', models.TextField()),
                ('Image', models.ImageField(blank=True, upload_to='images/')),
                ('view_count', models.IntegerField(default=0)),
                ('Look_likes', models.ManyToManyField(related_name='Look_likes', to=settings.AUTH_USER_MODEL)),
                ('big_region', models.ManyToManyField(blank=True, to='jamjamapp.Big_Region')),
                ('small_region', models.ManyToManyField(blank=True, to='jamjamapp.Small_Region')),
            ],
        ),
        migrations.CreateModel(
            name='Eat_C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=200)),
                ('Writer', models.CharField(max_length=100)),
                ('Write_day', models.DateTimeField(verbose_name='date published')),
                ('Content', models.TextField()),
                ('Image', models.ImageField(blank=True, upload_to='images/')),
                ('view_count', models.IntegerField(default=0)),
                ('Eat_likes', models.ManyToManyField(related_name='Eat_likes', to=settings.AUTH_USER_MODEL)),
                ('big_region', models.ManyToManyField(blank=True, to='jamjamapp.Big_Region')),
                ('small_region', models.ManyToManyField(blank=True, to='jamjamapp.Small_Region')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=50)),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='jamjamapp.blog')),
            ],
        ),
        migrations.AddField(
            model_name='blog',
            name='hashtags',
            field=models.ManyToManyField(blank=True, to='jamjamapp.Hashtag'),
        ),
    ]
